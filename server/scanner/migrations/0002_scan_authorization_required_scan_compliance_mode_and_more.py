# Generated by Django 5.2.1 on 2025-05-28 22:33

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scanner', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='scan',
            name='authorization_required',
            field=models.BooleanField(default=False, help_text='Whether this scan requires explicit authorization'),
        ),
        migrations.AddField(
            model_name='scan',
            name='compliance_mode',
            field=models.CharField(choices=[('strict', 'Strict'), ('moderate', 'Moderate'), ('permissive', 'Permissive')], default='strict', help_text='Compliance mode for the scan', max_length=20),
        ),
        migrations.AddField(
            model_name='scan',
            name='compliance_violations',
            field=models.JSONField(blank=True, default=list, help_text='List of compliance violations during scan'),
        ),
        migrations.AddField(
            model_name='scan',
            name='pages_scanned',
            field=models.IntegerField(default=0, help_text='Number of pages scanned'),
        ),
        migrations.AddField(
            model_name='scan',
            name='requests_made',
            field=models.IntegerField(default=0, help_text='Number of requests made during scan'),
        ),
        migrations.AddField(
            model_name='scan',
            name='scan_mode',
            field=models.CharField(choices=[('passive', 'Passive Scan Only'), ('active', 'Active Scan (Requires Authorization)'), ('mixed', 'Mixed (Passive + Active)')], default='passive', help_text='Type of scan to perform', max_length=20),
        ),
        migrations.AddField(
            model_name='scan',
            name='terms_accepted',
            field=models.BooleanField(default=False, help_text='Whether user accepted terms of service'),
        ),
        migrations.AddField(
            model_name='scan',
            name='terms_accepted_at',
            field=models.DateTimeField(blank=True, help_text='When terms were accepted', null=True),
        ),
        migrations.AddField(
            model_name='scan',
            name='terms_ip_address',
            field=models.GenericIPAddressField(blank=True, help_text='IP address when terms were accepted', null=True),
        ),
        migrations.CreateModel(
            name='ComplianceReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('daily', 'Daily Activity Report'), ('weekly', 'Weekly Summary Report'), ('monthly', 'Monthly Compliance Report'), ('incident', 'Security Incident Report'), ('audit', 'Compliance Audit Report')], max_length=20)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('report_data', models.JSONField(default=dict)),
                ('summary', models.TextField()),
                ('report_file', models.FileField(blank=True, null=True, upload_to='compliance_reports/')),
                ('generated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='ScanAuthorization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(max_length=255)),
                ('authorization_type', models.CharField(choices=[('self_owned', 'Website Owner'), ('written_permission', 'Written Permission'), ('bug_bounty', 'Bug Bounty Program'), ('penetration_test', 'Authorized Penetration Test')], max_length=50)),
                ('compliance_mode', models.CharField(choices=[('strict', 'Strict - Passive Only'), ('moderate', 'Moderate - Limited Active'), ('permissive', 'Permissive - Full Testing')], default='strict', max_length=20)),
                ('authorization_document', models.FileField(blank=True, null=True, upload_to='authorizations/')),
                ('authorization_notes', models.TextField(blank=True)),
                ('contact_person', models.CharField(blank=True, max_length=255)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('valid_from', models.DateTimeField()),
                ('valid_until', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_authorizations', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authorizations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'domain')},
            },
        ),
        migrations.AddField(
            model_name='scan',
            name='authorization',
            field=models.ForeignKey(blank=True, help_text='Authorization for this scan (required for active scans)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scans', to='scanner.scanauthorization'),
        ),
        migrations.CreateModel(
            name='SecurityAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('scan_initiated', 'Scan Initiated'), ('scan_completed', 'Scan Completed'), ('scan_cancelled', 'Scan Cancelled'), ('compliance_violation', 'Compliance Violation'), ('unauthorized_attempt', 'Unauthorized Scan Attempt'), ('rate_limit_exceeded', 'Rate Limit Exceeded'), ('suspicious_activity', 'Suspicious Activity'), ('vulnerability_found', 'Vulnerability Found'), ('admin_action', 'Admin Action'), ('active_scan_initiated', 'Active Scan Initiated'), ('passive_scan_initiated', 'Passive Scan Initiated')], max_length=50)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='low', max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('target_domain', models.CharField(blank=True, max_length=255)),
                ('scan_id', models.UUIDField(blank=True, null=True)),
                ('scan_mode', models.CharField(blank=True, max_length=20)),
                ('compliance_mode', models.CharField(blank=True, max_length=20)),
                ('event_data', models.JSONField(default=dict)),
                ('message', models.TextField()),
                ('reviewed', models.BooleanField(default=False)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_audit_logs', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['event_type', 'timestamp'], name='scanner_sec_event_t_95ce47_idx'), models.Index(fields=['user', 'timestamp'], name='scanner_sec_user_id_5d010c_idx'), models.Index(fields=['target_domain', 'timestamp'], name='scanner_sec_target__fede5c_idx'), models.Index(fields=['severity', 'timestamp'], name='scanner_sec_severit_644561_idx'), models.Index(fields=['scan_mode', 'timestamp'], name='scanner_sec_scan_mo_de65fd_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserAgreement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agreement_type', models.CharField(choices=[('terms_of_service', 'Terms of Service'), ('privacy_policy', 'Privacy Policy'), ('responsible_disclosure', 'Responsible Disclosure Guidelines'), ('active_scanning_agreement', 'Active Scanning Legal Agreement')], max_length=50)),
                ('agreement_version', models.CharField(default='1.0', max_length=10)),
                ('accepted_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agreements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-accepted_at'],
                'unique_together': {('user', 'agreement_type', 'agreement_version')},
            },
        ),
    ]
