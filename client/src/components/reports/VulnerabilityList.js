// frontend/src/components/reports/VulnerabilityList.js

import { useState } from "react";
import { getSeverityBadgeClass } from "../../utils/securityUtils";

const VulnerabilityList = ({ results }) => {
  const [filter, setFilter] = useState("all");
  const [openItems, setOpenItems] = useState({ 0: true }); // First item open by default

  // Group results by severity for count display
  const severityCounts = results.reduce((acc, result) => {
    acc[result.severity] = (acc[result.severity] || 0) + 1;
    return acc;
  }, {});

  // Filter results based on selected filter
  const filteredResults =
    filter === "all"
      ? results
      : results.filter((result) => result.severity === filter);

  // Sort results by severity (critical first, then high, medium, low, info)
  const sortedResults = [...filteredResults].sort((a, b) => {
    const severityOrder = { critical: 1, high: 2, medium: 3, low: 4, info: 5 };
    return (
      severityOrder[(a.severity || "").toLowerCase()] -
      severityOrder[(b.severity || "").toLowerCase()]
    );
  });

  // Toggle accordion item
  const toggleItem = (index) => {
    setOpenItems((prev) => ({
      ...prev,
      [index]: !prev[index],
    }));
  };

  return (
    <div>
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h6 className="mb-0">Security Findings</h6>
        <div className="btn-group">
          <button
            type="button"
            className={`btn btn-sm ${
              filter === "all" ? "btn-primary" : "btn-outline-primary"
            }`}
            onClick={() => setFilter("all")}
          >
            All ({results.length})
          </button>
          {severityCounts.critical && (
            <button
              type="button"
              className={`btn btn-sm ${
                filter === "critical" ? "btn-danger" : "btn-outline-danger"
              }`}
              onClick={() => setFilter("critical")}
            >
              Critical ({severityCounts.critical})
            </button>
          )}
          {severityCounts.high && (
            <button
              type="button"
              className={`btn btn-sm ${
                filter === "high" ? "btn-warning" : "btn-outline-warning"
              }`}
              onClick={() => setFilter("high")}
            >
              High ({severityCounts.high})
            </button>
          )}
          {severityCounts.medium && (
            <button
              type="button"
              className={`btn btn-sm ${
                filter === "medium" ? "btn-info" : "btn-outline-info"
              }`}
              onClick={() => setFilter("medium")}
            >
              Medium ({severityCounts.medium})
            </button>
          )}
          {severityCounts.low && (
            <button
              type="button"
              className={`btn btn-sm ${
                filter === "low" ? "btn-secondary" : "btn-outline-secondary"
              }`}
              onClick={() => setFilter("low")}
            >
              Low ({severityCounts.low})
            </button>
          )}
          {severityCounts.info && (
            <button
              type="button"
              className={`btn btn-sm ${
                filter === "info"
                  ? "btn-light border"
                  : "btn-outline-light border"
              }`}
              onClick={() => setFilter("info")}
            >
              Info ({severityCounts.info})
            </button>
          )}
        </div>
      </div>

      {sortedResults.length === 0 ? (
        <div className="alert alert-info">
          No vulnerabilities found with the selected filter.
        </div>
      ) : (
        <div className="accordion" id="vulnerabilityAccordion">
          {sortedResults.map((result, index) => (
            <div className="accordion-item" key={result.id || index}>
              <h2 className="accordion-header" id={`heading-${index}`}>
                <button
                  className={`accordion-button ${
                    !openItems[index] ? "collapsed" : ""
                  }`}
                  type="button"
                  onClick={() => toggleItem(index)}
                >
                  <div className="d-flex w-100 justify-content-between align-items-center">
                    <span>{result.name}</span>
                    <span
                      className={`badge ${getSeverityBadgeClass(
                        (result.severity || "").toLowerCase()
                      )} ms-2`}
                    >
                      {result.severity}
                    </span>
                  </div>
                </button>
              </h2>
              <div
                id={`collapse-${index}`}
                className={`accordion-collapse collapse ${
                  openItems[index] ? "show" : ""
                }`}
                aria-labelledby={`heading-${index}`}
              >
                <div className="accordion-body">
                  <p>{result.description}</p>

                  {result.details && result.details.recommendation && (
                    <div className="mt-3">
                      <h6>Recommendation:</h6>
                      <p>{result.details.recommendation}</p>
                    </div>
                  )}

                  {result.details && result.details.example && (
                    <div className="mt-3">
                      <h6>Example:</h6>
                      <code className="d-block bg-light p-2 rounded">
                        {result.details.example}
                      </code>
                    </div>
                  )}

                  <div className="mt-3 text-muted">
                    <small>Category: {result.category}</small>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default VulnerabilityList;
