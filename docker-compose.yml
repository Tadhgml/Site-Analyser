# docker-compose.yml - Fixed with proper permissions and directory handling
services:
  # PostgreSQL Database
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./server/.env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    env_file:
      - ./server/.env
    depends_on:
      - db
    restart: unless-stopped

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Django Backend (Server)
  server:
    build:
      context: ./server
      dockerfile: ../docker/server/Dockerfile
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - logs_volume:/app/logs
      - ./server:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./server/.env
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=site_analyser.settings.base
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Simplified command without chmod (let Docker handle volume permissions)
    command: >
      bash -c "
        mkdir -p /app/logs /app/static /app/media &&
        python manage.py collectstatic --noinput &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000
      "

  # Celery Worker
  celery:
    build:
      context: ./server
      dockerfile: ../docker/celery/Dockerfile
    volumes:
      - logs_volume:/app/logs
      - ./server:/app
    depends_on:
      db:
        condition: service_healthy 
      redis:
        condition: service_healthy
      server:
        condition: service_started  # Changed from service_healthy to service_started
    env_file:
      - ./server/.env
    restart: unless-stopped
    entrypoint: ["/entrypoint.sh"]
    command: ["celery", "--app=celery_app", "worker", "--loglevel=info"]
    environment:
      - PYTHONPATH=/app

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ./server
      dockerfile: ../docker/celery/Dockerfile
    volumes:
      - logs_volume:/app/logs
      - ./server:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery:
        condition: service_started
    env_file:
      - ./server/.env
    entrypoint: ["/entrypoint.sh"]
    command: ["celery", "--app=celery_app", "beat", "--loglevel=info"]
    restart: unless-stopped

  # React Frontend (Client) - Development
  client-dev:
    build:
      context: ./client
      dockerfile: ../docker/client/Dockerfile.dev
    volumes:
      - ./client:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    env_file:
      - ./client/.env.dev
    depends_on:
      - server
    command: npm start
    profiles: ["dev"]

  # React Frontend (Client) - Production build
  client:
    build:
      context: ./client
      dockerfile: ../docker/client/Dockerfile
    volumes:
      - client_build:/usr/share/nginx/html
    env_file:
      - ./client/.env.prod
    depends_on:
      - server
    profiles: ["prod"]

  # Nginx for routing and serving static files
  nginx:
    build:
      context: .
      dockerfile: ./docker/nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - server
      - client
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - client_build:/usr/share/nginx/html
    restart: unless-stopped
    profiles: ["prod"]

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  logs_volume:
  client_build: